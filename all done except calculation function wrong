// The CameraVideoPageController is a class that controls the camera 
// video page.  This class provides a some useful methods you will
// need to call:
//     cameraVideoPage.displayMessage(message, timeout):
//         Causes a short message string to be displayed on the
//         page for a brief period.  Useful for showing quick
//         notifications to the user.  message is a plain string.
//         timeout is option and denotes the length of time in msec
//         to show the message for.
//     cameraVideoPage.setHeadsUpDisplayHTML(html):
//         This will set or update the heads-up-display with the
//         text given in the html argument.  Usually this should 
//         just be a string with text and line breaks (<br />).

 // Given an HTML element class and a boolean representing
    // whether those elements should be displayed, this function
    // hides/shows all elements with that class.
    // ======================================================================
    //   Orientation/compass sensor code (deviceOrientation)
    // ======================================================================    


// Initialise the camera video page and callback to our 
// cameraVideoPageInitialised() function when ready.
var axisX, axisY, axisZ, absoulute, userInputHeight, BaseDistance, finalHeight;
var cameraVideoPage = new CameraVideoPageController(
        cameraVideoPageInitialised);

// You may need to create variables to store state.
    
// This function will be called when the camera video page
// is intialised and ready to be used.
    function cameraVideoPageInitialised(event)
{
    // Step 1: Check for and intialise deviceMotion
	 axisX = event.alpha;
     axisY = event.beta;
     axisZ = event.gamma;
	 absolute = event.absolute;

   cameraVideoPage.setHeadsUpDisplayHTML("alpha :" + axisX.toFixed(2) + "\n" + "<br />"+"beta :" + axisY.toFixed(2) + "\n" + "<br />"+"gamma :" + axisZ.toFixed(2) + "\n" + "<br />"+"absolute :" + absolute + "\n" + "<br />");
    
}
window.addEventListener('deviceorientation',cameraVideoPageInitialised);
    
// This function is called by a button to set the height of phone from the
// ground, in metres.

function setCameraHeightValue()
{
    // Step 3: Set camera height
    // check if input is a number and is positive
    // display on screen using the displayMessage method
    userInputHeight = prompt("Please enter your estimated camera height (meter)");
    if (userInputHeight != null)
        {
            while (isNaN(userInputHeight) || userInputHeight <=0 )
            {
                alert("Your entry is not a number or it is a negative value");
                userInputHeight = prompt("Please enter your estimated camera height");
            }
        }
    cameraVideoPage.displayMessage("Estimated Camera height: " + userInputHeight + "m", 1000);
    return parseInt(userInputHeight);
}

    
// This function is called by a button to set the angle to the base of
// the object being measured.  It uses the current smoothed tilt angle.
function setBaseTiltAngle()
{
    // Step 4: Record tilt angle 
    // display on screen using the displayMessage method
    var result = axisY;
    BaseDistance = estimatedDistance(result, parseInt(userInputHeight));
    cameraVideoPage.displayMessage("Base Tilt Angle: " + result.toFixed(2), 1000);
    cameraVideoPage.displayMessage("Estimated distance: " + BaseDistance.toFixed(2) + "m", 1000);    
}

// This function is called by a button to set the angle to the apex of
// the object being measured.  It uses the current smoothed tilt angle.
function setApexTiltAngle()
{
    // Step 4: Record tilt angle 
    // display on screen using the displayMessage method
    var result = axisY;
    finalHeight = estimatedHeight(result,BaseDistance, parseInt(userInputHeight));
    cameraVideoPage.displayMessage("Apex Tilt Angle: " + result.toFixed(2), 1000);
    cameraVideoPage.displayMessage("Height: " + finalHeight.toFixed(2) + "m", 1000);
}

// You may need to write several other functions.

// This function is used to calculate the estimated distance to the object
function estimatedDistance(angle, height)
{
    // convert from degree to radian
    var convertRadian1 = Math.abs(angle) * Math.PI / 180;
    // calculate distance to the object
    var distance = height / Math.tan(convertRadian1);
    return distance;
}

// This function is used to calculate the total estimated height of object
function estimatedHeight(angle, distance,iniHeight)
{
    //This function is used to calculate the height difference from
    //the device to Apex of object
    function upperHeight()
    {
        // convert from degree to radian
        var convertRadian2 = Math.abs(angle-90) * Math.PI / 180;
        // calculate the height difference
        var result = Math.tan(convertRadian2) * distance;
        return result;
    }
    var totalHeight =  upperHeight()+iniHeight;
    return totalHeight;
}
